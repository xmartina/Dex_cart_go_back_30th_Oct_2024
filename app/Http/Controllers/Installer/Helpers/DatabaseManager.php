<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-07-16 05:48:27              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*
* Copyright (C) Incevio Systems, Inc - All Rights Reserved
* Unauthorized copying of this file, via any medium is strictly prohibited
* Proprietary and confidential
* Written by Munna Khan <help.zcart@gmail.com>, September 2018
*/
 namespace App\Http\Controllers\Installer\Helpers; use Exception; use Illuminate\Database\SQLiteConnection; use Illuminate\Support\Facades\Artisan; use Illuminate\Support\Facades\Config; use Illuminate\Support\Facades\DB; use Symfony\Component\Console\Output\BufferedOutput; class DatabaseManager { public function migrateAndSeed() { $outputLog = new BufferedOutput(); $this->sqlite($outputLog); return $this->migrate($outputLog); } private function migrate($outputLog) { try { Artisan::call("\x6d\151\147\162\x61\164\x65", ["\x2d\55\146\x6f\x72\143\x65" => true], $outputLog); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\x72\162\x6f\x72", $outputLog); } return $this->seed($outputLog); } private function seed($outputLog) { try { Artisan::call("\144\x62\72\x73\145\x65\x64", ["\55\x2d\146\157\162\x63\x65" => true], $outputLog); Artisan::call("\151\156\143\x65\166\151\x6f\72\147\x65\x6e\145\162\141\164\x65\x2d\153\145\171", ["\x2d\x2d\146\157\x72\x63\x65" => true], $outputLog); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\162\162\x6f\162", $outputLog); } return $this->response(trans("\151\x6e\x73\x74\141\x6c\x6c\x65\162\137\155\145\x73\x73\x61\147\145\x73\56\146\151\x6e\141\154\x2e\146\151\156\151\x73\150\145\144"), "\x73\x75\143\143\145\x73\163", $outputLog); } public function seedDemoData() { ini_set("\x6d\141\170\x5f\145\170\x65\x63\x75\164\151\x6f\156\137\164\151\x6d\145", 1200); $outputLog = new BufferedOutput(); try { Artisan::call("\x69\x6e\x63\145\166\x69\157\72\144\x65\155\157"); } catch (Exception $e) { return $this->response($e->getMessage(), "\x65\162\162\x6f\x72", $outputLog); } return $this->response(trans("\x69\x6e\x73\x74\141\154\x6c\145\162\x5f\x6d\145\163\163\x61\x67\x65\x73\56\146\151\156\141\x6c\56\x66\151\x6e\x69\x73\x68\x65\144"), "\x73\x75\x63\x63\x65\x73\163", $outputLog); } private function response($message, $status, $outputLog) { return ["\163\164\x61\164\x75\163" => $status, "\x6d\x65\163\163\x61\x67\x65" => $message, "\x64\x62\x4f\x75\x74\x70\x75\164\x4c\x6f\x67" => $outputLog->fetch()]; } private function sqlite($outputLog) { if (!DB::connection() instanceof SQLiteConnection) { goto h1hU7; } $database = DB::connection()->getDatabaseName(); if (file_exists($database)) { goto Yoobx; } touch($database); DB::reconnect(Config::get("\144\141\x74\x61\142\141\163\x65\56\x64\x65\x66\141\165\154\164")); Yoobx: $outputLog->write("\125\163\151\156\147\x20\123\x71\x6c\114\151\x74\x65\40\x64\141\x74\x61\x62\x61\x73\x65\x3a\x20" . $database, 1); h1hU7: } }
