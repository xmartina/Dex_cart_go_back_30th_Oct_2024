<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-07-16 05:49:04              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*
* Copyright (C) Incevio Systems, Inc - All Rights Reserved
* Unauthorized copying of this file, via any medium is strictly prohibited
* Proprietary and confidential
* Written by Munna Khan <help.zcart@gmail.com>, September 2018
*/
 namespace App\Http\Controllers\Admin; use App\Models\Package; use Illuminate\Http\Request; use App\Services\PackageInstaller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Cache; use Illuminate\Support\Facades\Artisan; use App\Http\Requests\AdminOnlyAccessRequest; use App\Http\Requests\Validations\PackageInstallationRequest; class PackagesController extends Controller { public function index(AdminOnlyAccessRequest $request) { $installables = $this->scanPackages(); $installedPackages = Package::all(); return view("\x61\x64\x6d\x69\156\56\160\x61\x63\153\141\147\145\163\x2e\151\x6e\144\x65\x78", compact("\x69\x6e\163\164\x61\x6c\x6c\x61\x62\x6c\x65\163", "\x69\x6e\x73\164\x61\x6c\154\145\x64\120\141\143\x6b\141\x67\145\163")); } public function upload(AdminOnlyAccessRequest $request) { return view("\141\x64\155\151\156\56\x70\x61\x63\x6b\141\147\145\x73\x2e\137\x75\x70\154\157\141\144"); } public function save(AdminOnlyAccessRequest $request) { echo "\74\160\x72\145\76"; print_r($request->all()); echo "\74\160\x72\145\x3e"; exit("\145\x6e\x64\41"); } public function initiate(AdminOnlyAccessRequest $request, string $package) { if (!$this->isDemo()) { goto l2uYP; } return back()->with("\x77\141\162\156\151\x6e\x67", trans("\x6d\145\163\163\x61\x67\145\163\x2e\144\145\x6d\157\x5f\x72\x65\163\164\162\151\143\164\151\157\x6e")); l2uYP: $installable = $this->scanPackages($package); if (!($installable && Package::where("\163\x6c\165\147", $installable["\x73\154\165\147"])->exists())) { goto kq2aZ; } return back()->with("\145\162\162\157\x72", trans("\x6d\x65\163\x73\x61\x67\145\x73\56\x70\x61\x63\x6b\141\147\x65\x5f\x69\156\163\x74\x61\x6c\154\145\144\137\141\154\x72\x65\x61\144\x79", ["\x70\141\x63\x6b\x61\147\145" => $package])); kq2aZ: return view("\x61\144\x6d\x69\x6e\x2e\160\141\x63\x6b\141\x67\x65\163\x2e\137\151\x6e\x69\164\151\x61\x74\x65", compact("\x69\156\x73\x74\141\154\154\x61\x62\154\145")); } public function upgrade(AdminOnlyAccessRequest $request, string $package) { if (!$this->isDemo()) { goto dUzL2; } return back()->with("\167\x61\x72\x6e\x69\x6e\x67", trans("\155\x65\x73\x73\x61\147\x65\163\56\x64\x65\155\157\137\162\145\x73\x74\162\151\143\x74\151\157\156")); dUzL2: $installable = $this->scanPackages($package); if ($installable) { goto lkxQo; } return back()->with("\145\162\162\157\162", trans("\155\x65\163\163\141\x67\145\163\56\x70\x61\143\153\141\x67\x65\x5f\156\157\164\x5f\146\157\x75\156\144", ["\160\141\143\153\141\x67\x65" => $package])); lkxQo: try { $installer = new PackageInstaller($request, $installable); $installer->upgrade(); } catch (\Exception $e) { Log::error($e); return back()->with("\x65\x72\x72\x6f\x72", $e->getMessage()); } return back()->with("\163\165\143\x63\x65\163\163", trans("\x6d\x65\x73\x73\x61\147\145\163\56\160\x61\x63\x6b\141\147\145\137\x75\160\147\162\141\144\x65\144\137\x73\165\143\x63\x65\x73\x73", ["\x70\141\x63\x6b\x61\x67\145" => $package])); } public function install(PackageInstallationRequest $request, string $package) { if (!$this->isDemo()) { goto LerPN; } return back()->with("\167\x61\x72\156\151\x6e\147", trans("\x6d\145\163\163\x61\x67\145\x73\56\144\x65\x6d\157\137\162\x65\163\x74\x72\x69\x63\x74\151\157\x6e")); LerPN: $installable = $this->scanPackages($package); if ($installable) { goto gwW9X; } return back()->with("\x65\162\x72\157\x72", trans("\x6d\145\x73\163\141\147\x65\163\56\x70\141\143\x6b\141\147\145\137\156\157\164\x5f\x66\157\165\x6e\x64", ["\160\141\143\x6b\141\x67\145" => $package])); gwW9X: try { $installer = new PackageInstaller($request, $installable); $installer->install(); } catch (\Exception $e) { Log::error($e); $installer->uninstall(); Package::where("\163\154\x75\147", $package)->delete(); return back()->with("\x65\162\162\157\162", $e->getMessage()); } Artisan::call("\x63\141\x63\150\x65\72\143\154\145\x61\x72"); Artisan::call("\162\157\x75\x74\x65\72\x63\154\x65\x61\162"); return back()->with("\x73\165\143\x63\x65\x73\x73", trans("\155\x65\x73\163\x61\147\145\163\x2e\160\141\143\153\x61\147\x65\x5f\151\x6e\163\164\141\x6c\154\145\144\137\x73\x75\143\143\145\x73\163", ["\x70\141\x63\153\x61\x67\145" => $package])); } public function uninstall(AdminOnlyAccessRequest $request, string $package) { if (!$this->isDemo()) { goto pGKEW; } return back()->with("\167\x61\162\x6e\151\156\x67", trans("\x6d\x65\163\x73\141\147\145\x73\56\144\x65\x6d\x6f\x5f\x72\145\163\164\162\151\x63\x74\x69\157\156")); pGKEW: $registered = Package::where("\163\x6c\x75\x67", $package)->firstOrFail(); $uninstallable = $this->scanPackages($package); try { $installer = new PackageInstaller($request, $uninstallable); if (!$installer->uninstall()) { goto N2_jf; } Artisan::call("\x63\141\x63\x68\145\x3a\x63\x6c\145\x61\162"); Artisan::call("\x72\x6f\165\164\145\72\x63\x6c\x65\x61\162"); if (!$registered->delete()) { goto EO3uV; } return back()->with("\163\x75\x63\x63\x65\x73\x73", trans("\x6d\x65\x73\x73\141\147\x65\163\56\x70\141\143\153\x61\x67\x65\x5f\165\156\151\156\163\x74\141\x6c\x6c\x65\144\x5f\163\165\143\143\x65\163\163", ["\160\x61\143\153\141\147\145" => $package])); EO3uV: N2_jf: } catch (\Exception $e) { Log::error($e); return back()->with("\145\162\x72\157\x72", $e->getMessage()); } return back()->with("\145\x72\x72\x6f\162", trans("\x6d\x65\x73\163\x61\x67\x65\163\56\146\x61\151\154\145\x64")); } public function activation(AdminOnlyAccessRequest $request, string $slug) { if (!$this->isDemo()) { goto oEcTV; } return response("\x65\162\x72\x6f\x72", 444); oEcTV: $package = Package::where("\x73\x6c\165\147", $slug)->first(); if (!$package) { goto wXA9l; } $package->active = !$package->active; $package->save(); Artisan::call("\143\141\143\x68\x65\72\143\154\145\141\162"); return response("\x73\165\143\143\x65\163\x73", 200); wXA9l: if (!($unregistered = $this->scanPackages($slug))) { goto kdFic; } Package::create($unregistered); kdFic: return response("\163\165\x63\x63\x65\163\163", 200); } public function updateConfig(Request $request) { if (!updateOptionTable($request)) { goto Gbtqq; } return back()->with("\x73\165\143\143\x65\163\163", trans("\155\145\163\163\141\147\145\163\56\160\x61\x63\153\x61\x67\x65\137\x73\145\x74\x74\x69\x6e\147\x73\137\x75\x70\144\141\164\145\x64")); Gbtqq: return back()->with("\x65\162\x72\157\x72", trans("\x6d\x65\x73\163\141\147\x65\163\x2e\146\141\151\x6c\x65\144")); } public function toggleConfig(Request $request, string $option) { if (!$this->isDemo()) { goto m13i7; } return response("\145\162\162\x6f\162", 444); m13i7: $updated = DB::table("\x6f\160\x74\151\157\x6e\163")->where("\157\x70\x74\151\157\156\137\156\141\155\x65", $option)->update(["\157\160\164\x69\x6f\x6e\137\166\141\x6c\165\145" => DB::raw("\116\x4f\x54\40\x6f\160\x74\x69\157\156\137\x76\x61\154\165\145")]); if (!$updated) { goto Krgdl; } Cache::forget($option); return response("\163\x75\143\143\145\x73\163", 200); Krgdl: return response("\145\162\x72\x6f\162", 405); } private function scanPackages(?string $slug = null) : array { $packages = []; foreach (glob(base_path("\160\141\x63\153\x61\x67\145\x73\x2f\x2a"), GLOB_ONLYDIR) as $dir) { if (!file_exists($manifest = $dir . "\x2f\x6d\x61\x6e\151\146\x65\x73\x74\56\152\163\x6f\156")) { goto JNMKD; } $json = file_get_contents($manifest); if (!($json !== '')) { goto NwLZx; } $data = json_decode($json, true); if (!($data === null)) { goto HNRhm; } throw new \Exception("\x49\x6e\x76\141\154\x69\x64\40\x6d\x61\156\151\146\x65\x73\164\x2e\x6a\163\157\156\40\x66\x69\154\x65\x20\141\x74\x20\133{$dir}\135"); HNRhm: $data["\x70\141\x74\x68"] = $dir; if (!($slug && $data["\x73\154\x75\x67"] == $slug)) { goto a4i1O; } return $data; a4i1O: $packages[] = $data; NwLZx: JNMKD: cXl7e: } TMSLP: usort($packages, function ($x, $y) { return strcasecmp($x["\x6e\x61\155\145"], $y["\x6e\x61\155\x65"]); }); return $packages; } private function isDemo() : bool { return config("\x61\160\160\56\144\x65\x6d\157") && !config("\141\x70\160\56\x64\145\142\x75\147"); } }